
* Automatic package installation
  #+begin_src emacs-lisp
    (require 'package)
    (package-initialize)

    ;; add extra sources to the package archives
    (setq package-archives
          '(("gnu" . "http://elpa.gnu.org/packages/")
            ("melpa" . "http://melpa.milkbox.net/packages/")
            ("marmalade" . "http://marmalade-repo.org/packages/")))

    ;; assumes that load path is always at default...
    (add-to-list 'load-path "~/.emacs.d/use-package")
    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src

* Appearance
  These lines of code disable most of the gui elements used in emacs
  so you can get so much more of that sweet, sweet text on your screen.
  #+begin_src emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
  #+end_src

** Theme
   The theme that I use, nice for high contrast stuff.
   #+begin_src emacs-lisp
     (use-package grandshell
                  :ensure grandshell-theme
                  :init
                  (load-theme 'grandshell t))

   #+end_src

* Extensions
** Magit
   #+begin_src emacs-lisp
     (use-package magit
       :commands magit-status
       :init
       (setq magit-last-seen-setup-instructions "1.4.0")
       :bind
       ("<f7>" . magit-status))

   #+end_src
** counsel
   #+begin_src emacs-lisp
     (use-package counsel
       :init
       :config
       :bind
       ("M-s" . counsel-git-grep)
       ("C-x f" . counsel-git))

   #+end_src
** ivy
   Replacement for ido/smex etc.
   #+begin_src emacs-lisp
     (use-package flx)
     (use-package ivy
       :init
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-height 10)
       (setq ivy-count-format "(%d/%d)")
       (setq ivy-re-builders-alist
             '((t . ivy--regex-fuzzy)))
       (setq ivy-initial-inputs-alist nil)
       :config
       (setq magit-completing-read-function 'ivy-completing-read)
       (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
       (global-set-key (kbd "M-x") 'counsel-M-x)
       :bind
       (:map ivy-minibuffer-map
             ("[tab]" . ivy-alt-done)
             ("<return>" . ivy-alt-done)))

   #+end_src

** company-mode
   auto completion stuff.
   #+begin_src emacs-lisp
     (use-package company
       :init
       (global-company-mode)
       :config
       (setq company-minimum-prefix-length 2))
   #+end_src

** yasnippet
   snippet expansion.
   #+begin_src emacs-lisp
     (use-package yasnippet
       :config
       (yas-global-mode 1)
       (yas-reload-all)
       (setq yas-snippet-dirs (append yas-snippet-dirs
                                      '("~/.emacs.d/snippets" "~/.emacs.d/yasnippets-snippets"))))
   #+end_src
** Visual indentation guides
   #+begin_src emacs-lisp
     (use-package indent-guide
       :config
       (add-hook 'prog-mode-hook 'indent-guide-mode)
       (setq indent-guide-recursive t))
   #+end_src
** Parentheses matching
   #+begin_src emacs-lisp
     (use-package smartparens-config
       :ensure smartparens
       :init
       (smartparens-global-mode)
       :config
       (setq sp-autoescape-string-quote-if-empty t))
       
   #+end_src
** Hungry delete
   Delete all whitespace in the intended direction
   #+begin_src emacs-lisp
     ;; integration with smartparens
     ;; todo: sexp?
     (defun hungry-if-whitespace-backward ()
       (interactive)
       (if (or (string-match-p "[[:blank:]]" (string (preceding-char)))
               (eq (current-column) 0))
           (hungry-delete-backward -1)
         (sp-backward-delete-char)))


     (defun hungry-if-whitespace-forward ()
       (interactive)
       (if (string-match-p "[[:blank:]]" (string (following-char)))
           (hungry-delete-forward -1)
         (sp-delete-char)))

     (defun just-one-space-in-region (beg end)
       "replace all whitespace in the region with single spaces"
       (interactive "r")
       (save-excursion
         (save-restriction
           (narrow-to-region beg end)
           (goto-char (point-min))
           (while (re-search-forward "\\s-+" nil t)
             (replace-match " ")))))

     (defun just-one-space-if-region ()
       (interactive)
       (if (use-region-p)
           (call-interactively 'just-one-space-in-region)
         (call-interactively 'just-one-space)))


     (string-match-p "[[:blank:]]" "   ")

     (use-package hungry-delete
       :init
       (global-hungry-delete-mode)
       :bind
       ("<backspace>" . hungry-if-whitespace-backward)
       ("<deletechar>" . hungry-if-whitespace-forward)
       ("M-SPC" . just-one-space-if-region))


   #+end_src
** Whitespace butler
   Delete whitespace when I save
   #+begin_src emacs-lisp
     (use-package ws-butler
       :init
       (ws-butler-global-mode))
   #+end_src

** Aggressive-indent
   Aggressively indent code and text
   #+begin_src emacs-lisp
     (use-package aggressive-indent
       :init
       (aggressive-indent-global-mode))
   #+end_src


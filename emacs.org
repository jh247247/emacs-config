* Automatic package installation
  This function makes it so that any package called with
  =packages-require= will be downloaded and installed.
  e.g: =(packages-require 'magit)=

#+begin_src emacs-lisp
  (require 'package)

  ;; add extra sources to the package archives
  (setq package-archives
        '(("melpa" . "http://melpa.milkbox.net/packages/")
          ("org". "http://orgmode.org/elpa/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))


  ;; activate all the packages
  (package-initialize)

  ; fetch the list of packages available
  (unless package-archive-contents
    (package-refresh-contents))

  ;; function to install a given list of packages.
  (defun packages-require (&rest package-list)
    (dolist (package package-list)
      (unless (package-installed-p package)
        (package-install package)))
    (package-initialize)
    (delete-other-windows))


#+end_src

* Appearance
  These lines of code disable most of the gui elements used in emacs
  so you can get so much more of that sweet, sweet text on your screen.
#+begin_src emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message "")
  (setq inhibit-startup-message t)
#+end_src

** Theme
   The theme that I use, nice for high contrast stuff.
   #+begin_src emacs-lisp
  (packages-require 'grandshell-theme)
  (load-theme 'grandshell t)
#+end_src
   Note that there is a small bug when using xterm-256color, where black is not really black.
   Hopefully this fixes it.
#+begin_src emacs-lisp
  (if window-system nil
   (set-face-background 'default "color-16"))
#+end_src
* Extensions
** Magit
   This mode allows for interaction with git from within emacs.
   #+BEGIN_SRC emacs-lisp
     (packages-require 'magit)
     (setq magit-last-seen-setup-instructions "1.4.0")
     (global-set-key (kbd "C-x g") 'magit-status)
   #+END_SRC

** smex
   This allows for autocomplete in the minibuffer when using =M-x= as
   well as fuzzy matching.
   #+BEGIN_SRC emacs-lisp
     (packages-require 'smex)

     ;;; Smex
     (autoload 'smex "smex"
       "Smex is a M-x enhancement for Emacs, it provides a convenient interface to
     your recently and most frequently used commands.")
     ;;; This adds a hyphen on space, instead of blocking.
     (defadvice smex (around space-inserts-hyphen activate compile)
       (let ((ido-cannot-complete-command
              `(lambda ()
                 (interactive)
                 (if (string= " " (this-command-keys))
                     (insert ?-)
                   (funcall ,ido-cannot-complete-command)))))
         ad-do-it))

     ;;; This adds abbreviation to commands, so that magit-status for
     ;;; example might become mags
     ;;; Filters ido-matches setting acronynm matches in front of the results
     (defadvice ido-set-matches-1 (after ido-acronym-matches activate)
       (if (> (length ido-text) 1)
           (let ((regex (concat "^" (mapconcat 'char-to-string ido-text "[^-]*-")))
                 (acronym-matches (list))
                 (remove-regexes '("-menu-")))
             ;; Creating the list of the results to be set as first
             (dolist (item items)
               (if (string-match (concat regex "[^-]*$") item) ;; strict match
                   (add-to-list 'acronym-matches item)
                 (if (string-match regex item) ;; appending relaxed match
                     (add-to-list 'acronym-matches item t))))

             ;; Filtering ad-return-value
             (dolist (to_remove remove-regexes)
               (setq ad-return-value
                     (delete-if (lambda (item)
                                  (string-match to_remove item))
                                ad-return-value)))

             ;; Creating resulting list
             (setq ad-return-value
                   (append acronym-matches
                           ad-return-value))

             (delete-dups ad-return-value)
             (reverse ad-return-value))))

     (global-set-key (kbd "M-x") 'smex)
   #+END_SRC

** ido
   #+BEGIN_SRC emacs-lisp
     (packages-require 'ido-ubiquitous)
     (ido-ubiquitous-mode 1)

     (require 'ido)
     (ido-mode t)
     (setq ido-enable-prefix nil
           ido-enable-flex-matching t
           ido-case-fold nil
           ido-auto-merge-work-directories-length -1
           ido-create-new-buffer 'always
           ido-use-filename-at-point nil
           ido-max-prospects 10
           ido-case-fold t)

     (defun sd/ido-define-keys () ;; C-n/p is more intuitive in vertical layout
       (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
       (define-key ido-completion-map (kbd "<down>") 'ido-next-match)
       (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)
       (define-key ido-completion-map (kbd "<up>") 'ido-prev-match))

     (add-hook
      'ido-setup-hook
      (lambda ()
        ;; Go straight home
        (define-key ido-file-completion-map
          (kbd "~")
          (lambda ()
            (interactive)
            (cond
             ((looking-back "~/") (insert "projects/"))
             ((looking-back "/") (insert "~/"))
             (:else (call-interactively 'self-insert-command)))))

        ;; Use C-w to go back up a dir to better match normal usage of C-w
        ;; - insert current file name with C-x C-w instead.
        (define-key ido-file-completion-map (kbd "C-w") 'ido-delete-backward-updir)
        (define-key ido-file-completion-map (kbd "C-x C-w") 'ido-copy-current-file-name)))

     ;; Always rescan buffer for imenu
     (set-default 'imenu-auto-rescan t)

     (add-to-list 'ido-ignore-directories "target")
     (add-to-list 'ido-ignore-directories "node_modules")

     ;; Fix ido-ubiquitous for newer packages
     (defmacro ido-ubiquitous-use-new-completing-read (cmd package)
       `(eval-after-load ,package
          '(defadvice ,cmd (around ido-ubiquitous-new activate)
             (let ((ido-ubiquitous-enable-compatibility nil))
               ad-do-it))))

     ;;; save this bit for later.
     ;;(ido-ubiquitous-use-new-completing-read webjump 'webjump)
     ;;(ido-ubiquitous-use-new-completing-read yas/expand 'yasnippet)
     ;;(ido-ubiquitous-use-new-completing-read yas/visit-snippet-file 'yasnippet)
   #+END_SRC
** Yasnippet
   Allows for expansion of abbreviations of code.

   For example expand =sysout= to =System.out.println= or something.
   #+BEGIN_SRC emacs-lisp
     (packages-require 'yasnippet)
     (require 'yasnippet)
     (yas-global-mode 1)

     ;; use built-in snippets as well as custom snippets (when I make them)
     (setq yas-snippet-dirs (append yas-snippet-dirs
                                    '("~/.emacs.d/snippets")))
   #+END_SRC
** auto-complete
   #+BEGIN_SRC emacs-lisp
     ;; auto complete stuff
     (packages-require 'auto-complete 'ac-math 'ac-dabbrev)

     (require 'auto-complete-config)
     (require 'ac-math)

     (ac-config-default)
     (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")

     (ac-flyspell-workaround)
     (ac-linum-workaround)
     (global-auto-complete-mode t)
     (setq ac-auto-start 3)
     (setq ac-dwim t)
     (setq ac-use-fuzzy t)

     (set-default 'ac-sources '(ac-source-yasnippet ac-source-dabbrev ac-source-semantic))

     (add-to-list 'ac-modes 'latex-mode)
     (add-to-list 'ac-modes 'org-mode)

     ;; maths-y stuff for modes that support it.
     (defun ac-latex-setup ()
       (setq ac-sources (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
                                ac-sources)))

     (add-hook 'LaTeX-mode-hook 'ac-latex-setup)
     (add-hook 'org-mode-hook 'ac-latex-setup)

     (defun auto-complete-mode-maybe ()
       "No maybe for you. Only AC!"
       (unless (minibufferp (current-buffer))
         (auto-complete-mode 1)))

     (define-key ac-complete-mode-map [tab] 'ac-expand)
   #+END_SRC
** Parenthesis matching
   #+BEGIN_SRC emacs-lisp
     (packages-require 'smartparens)
     (require 'smartparens-config)
     (smartparens-global-mode)

   #+END_SRC

** Line char limit
   Setup a char limit of 80 chars for any text input. This is mostly
   for input in a thin terminal (like my phone)
   #+BEGIN_SRC emacs-lisp
     (setq-default auto-fill-function 'do-auto-fill)
     (set-fill-column 80)
     (add-hook 'prog-mode '(lambda () (interactive)
                             (setq-local
                              comment-auto-fill-only-comments t)))
   #+END_SRC

** Automatic save
   Don't rely on emacs idle auto-save.
   Tell it to save every 300 characters.
   #+BEGIN_SRC emacs-lisp
   (setq auto-save-interval 300)
   #+END_SRC
** Org mode
   This section handles interaction between emacs and the various
   extensions that org mode handles.
*** Babel languages
    Extend the org language by allowing code to be executed as the org
    file is compiled.

    #+BEGIN_SRC emacs-lisp
      ;; active Org-babel languages
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((latex . t)
         (plantuml . t)
         (sh . t)
         (octave . t)))

      ;; fontify code in code blocks
      (setq org-src-fontify-natively t)

      ;; Don't ask when executing code, idc
      (setq org-confirm-babel-evaluate nil)
    #+END_SRC
*** Plantuml
    Plantuml is a pretty cool uml drawing tool that interacts with
    emacs well due to =plantuml-mode=
    #+BEGIN_SRC emacs-lisp
    (packages-require 'plantuml-mode)
    #+END_SRC

    Note that it requires the path to the jar file to be set in order
    to actually compile anything at all.
    #+BEGIN_SRC emacs-lisp
    (setq org-plantuml-jar-path
      (expand-file-name "/usr/share/plantuml/plantuml.jar"))
    #+END_SRC

*** Auto-complete
    Since org mode isn't in the ac-sources by default, let's add it with
    a handy package.
    #+BEGIN_SRC emacs-lisp
  (packages-require 'org-ac)
  (require 'org-ac)
  (org-ac/config-default)
    #+END_SRC

*** Auto Capitalize
    Because one of the main reasons I have emacs is to make me even
    more lazy.
    #+begin_src emacs-lisp
      (add-hook 'org-mode-hook #'auto-capitalize-mode)
    #+end_src
** Indenting
   #+BEGIN_SRC emacs-lisp
     (defun iwb ()
       "indent whole buffer"
       (interactive)
       (delete-trailing-whitespace)
       (indent-region (point-min) (point-max) nil)
       (untabify (point-min) (point-max)))

     ;; set it to some handy key binding.
     (global-set-key (kbd "<f3>") 'iwb)

     ;; sometimes I work with people that indent terribly.
     ;; for shiggles, lets fix that automatically.
     ;; note that this is a bit more 'nice' when working in a repo, so
     ;; kinda misses the point but still useful nonetheless.
     ;; (setq auto-indent-on-visit-file t)

     (packages-require 'aggressive-indent)
     (add-hook 'prog-mode-hook (lambda () (aggressive-indent-mode)))
     (add-hook 'org-mode-hook (lambda () (aggressive-indent-mode)))
   #+END_SRC
** Custom yank function
   This yank function accepts a prefix arg, to say how many times to
   actually paste the stuff from the clipboard. Handy.
   #+BEGIN_SRC emacs-lisp
     (defun yank-repeat (arg)
       "With numerical ARG, repeat last yank ARG times. "
       (interactive "p*")
       (dotimes (i arg)
         (insert (car kill-ring))))
     (define-key global-map (kbd "C-x C-y") 'yank-repeat)
   #+END_SRC
** Smart mode line
Set the mode line to smart mode line. Should be pretty good.
#+BEGIN_SRC emacs-lisp
  (packages-require 'smart-mode-line)
  ;;(setq sml/theme 'dark)
  (sml/setup)
#+END_SRC
** Ace jump
   #+BEGIN_SRC emacs-lisp
     (packages-require 'ace-jump-mode)
     (require 'ace-jump-mode)
     (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
     (setq ace-jump-mode-scope 'frame)

     ;; hack so that this works in org-mode too.
     (add-hook 'org-mode-hook
               (lambda ()
                 (local-set-key (kbd "\C-c SPC") 'ace-jump-mode)))

     ;;If you also use viper mode:
     ;; maybe one day...
     ;(define-key viper-vi-global-user-map (kbd "SPC") 'ace-jump-mode)
   #+END_SRC
** Saving points between editing sessions
   Sometimes editing code has me quitting at a particular point,
   before I can do something. If I am at the same point when I
   restart emacs (possibly on a different machine, via ssh) I can
   remember what I was doing before I quit.

   #+BEGIN_SRC emacs-lisp
     (require 'saveplace)
     (setq-default save-place t)
   #+END_SRC

** Removing trailing whitespace
   When I save, sometimes there is nasty whitespace at the end of
   some lines. This fixes this mistake. Note that this can be a
   lifesaver when writing makefiles and other files that require no
   extra whitespace.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC
** Compilation
Sometimes compilation can be a bit annoying. So to fix this, here is
a handy function that compiles using the same makefile that was used
last time!

#+BEGIN_SRC emacs-lisp
  (global-set-key [(f1)] 'compile-again)

  (setq compilation-last-buffer nil)
  (defun compile-again (pfx)
    (interactive "p")
    (if (and (eq pfx 1)
             compilation-last-buffer)
        (progn
          (set-buffer compilation-last-buffer)
          (revert-buffer t t))
      (call-interactively 'compile)))

  ;; some compilation stuff so that it scrolls to the first error when
  ;; it happens
  (setq compilation-scroll-output 'first-error)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; require winner mode for the auto closing of the compilation buffer.
  (winner-mode 1)

  (setq compilation-finish-functions 'compile-autoclose)
  ;; Close the compilation window if there was no error at all.
  (defun compile-autoclose (buffer string)
    (cond ((string-match "finished" string)
           (bury-buffer "*compilation*")
           (winner-undo)
           (message "Build successful."))
          (t
           (message "Compilation exited abnormally: %s" string))))
#+END_SRC
** Spelling
I like to have spelling for emacs (for org mode and others anyway)
very useful for notes.
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(org-mode-hook text-mode latex-mode))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC
Also something that is cool, auto-capitalization.
Does what it says on the tin.
#+BEGIN_SRC emacs-lisp
  (packages-require 'auto-capitalize)
  (require 'auto-capitalize)
#+END_SRC
** Expand-region
Expand region does some cool stuff, repeating the command expands the
region that is selected. (word --> sentence --> paragraph etc)
#+BEGIN_SRC emacs-lisp
  (packages-require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
** Hungry delete mode
This "eats" all the whitespace before the cursor (or in front, if so
desired).

#+BEGIN_SRC emacs-lisp
(packages-require 'hungry-delete)
(require 'hungry-delete)
(global-hungry-delete-mode)
#+END_SRC

** Perfect auto correct?
Adds some stuff to correct mistakes and save them so if you make the
same mistake it will automatically change it to the correct spelling.

Blatantly stolen from endlessparenthesis.com
#+BEGIN_SRC emacs-lisp
(define-key ctl-x-map "\C-i" 'endless/ispell-word-then-abbrev)

(defun endless/ispell-word-then-abbrev (p)
  "Call `ispell-word'. Then create an abbrev for the correction made.
With prefix P, create local abbrev. Otherwise it will be global."
  (interactive "P")
  (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
    (call-interactively 'ispell-word)
    (setq aft (downcase (or (thing-at-point 'word) "")))
    (unless (string= aft bef)
      (message "\"%s\" now expands to \"%s\" %sally"
               bef aft (if p "loc" "glob"))
      (define-abbrev
        (if p local-abbrev-table global-abbrev-table)
        bef aft))))

(setq save-abbrevs t)
(setq-default abbrev-mode t)
#+END_SRC
** File extension association
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))

#+END_SRC

** rectangle copy/paste
Sometimes I need to copy/paste a rectangular section of text. This
helps.
#+BEGIN_SRC emacs-lisp
  (packages-require 'rect-mark)
  (require 'rect-mark)
  (global-set-key (kbd "C-x r C-SPC") 'rm-set-mark)
  (global-set-key (kbd "C-x r C-x")   'rm-exchange-point-and-mark)
  (global-set-key (kbd "C-x r C-w")   'rm-kill-region)
  (global-set-key (kbd "C-x r M-w")   'rm-kill-ring-save)
#+END_SRC

** Rainbow delimiters
Add some color to the delimiters so that you can see what depth you
are at.
#+BEGIN_SRC emacs-lisp
  (packages-require 'rainbow-delimiters)
  (require 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** God-mode
God mode is a mode that changes the command so that it does not
require pressing the control key. It's as if the control key is
pressed all the time!
#+BEGIN_SRC emacs-lisp
  (packages-require 'god-mode)
  (require 'god-mode)

  ;; need to set this in console mode only or something...
  (if (eq window-system 'nil)  (global-set-key [(f2)] 'god-mode-all))
  (global-set-key (kbd "<escape>") 'god-mode-all)

#+END_SRC

** EasyPG
I want to be able to encrypt some files. This is the way I want to do
it.

#+BEGIN_SRC emacs-lisp
  (packages-require 'epa)
  (require 'epa)
  (when (require 'epa-file nil 'noerror)
    (epa-file-enable)

    ;; t      to always ask for user
    ;; nil    to ask for users unless specified
    ;;'silent to use symmetric encryption:
    (setq epa-file-select-key 'silent)

    ;;Note: if you have an instance of seahorse running, then the environment
    ;;variable GPG_AGENT_INFO=/tmp/seahorse-nDQm50/S.gpg-agent:6321:1, which
    ;;causes emacs to start a GUI for password, instead of using mini-buffer.

    (setenv "GPG_AGENT_INFO" nil)
    ;; Note: another form is:
    ;;(setenv (concat "GPG_AGENT_INFO" nil))
    )
#+END_SRC

** Multiple cursors
This adds many cursors to emacs, so you can edit many lines at the
same time. Pretty handy for things that need to be changed and you
can't be bothered scripting.

#+BEGIN_SRC emacs-lisp
  (packages-require 'multiple-cursors)
  (require 'multiple-cursors)

  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-;") 'mc/mark-all-symbols-like-this-in-defun)
#+END_SRC

** subword-mode
   =subword-mode= is useful for changing functions, since they are
   usually camelcase. This means that you can =C-BKSPC= words within a
   function.
   #+begin_src emacs-lisp
     (add-hook 'prog-mode 'subword-mode)
   #+end_src
* Android workarounds
  I like to keep my stuff consistent across every system. Since
  android+ssh does some funny stuff I have to compensate.
** Marking
In android, =Ctrl+SPC= does not actually go through since it is +eaten
by some language switching keybinding or something.+ actually an error
in the matrix of the keyboard. Really grinds my gears. So, to fix
this, make a new keybinding that adds a short command to mark the
buffer.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x SPC") 'set-mark-command)
#+END_SRC
